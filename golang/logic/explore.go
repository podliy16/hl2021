package logic

import (
	"fmt"
	"goldclient/httpclient"
	"goldclient/models"
	"os"
	"time"
)

const EXPLORE_SIZE = 1775
const Y_SIZE = 4

// [0 - 1792]
var tmp = []int {
	0,1,1,1,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,3,15,3,15,15,15,15,15,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,15,15,14,15,15,15,15,15,15,15,3,3,3,3,15,3,3,7,15,3,28,14,15,14,14,3,15,7,3,3,15,15,15,15,3,28,14,15,7,28,3,7,14,3,7,15,15,7,15,15,28,3,15,28,14,15,28,15,3,7,14,15,7,15,27,15,15,27,3,26,27,26,3,15,28,14,15,14,27,15,14,7,3,15,26,24,28,3,15,28,14,15,15,28,15,27,3,15,25,15,27,27,14,28,31,26,27,28,15,15,60,15,3,15,3,27,25,28,27,28,3,60,3,27,27,49,15,15,15,62,54,28,15,27,15,15,61,15,3,7,3,25,28,3,27,28,53,28,55,60,59,3,63,63,61,31,55,113,14,27,15,27,28,53,3,27,126,3,28,27,28,57,116,14,124,127,54,60,14,14,57,57,59,52,126,59,54,28,26,28,3,57,57,107,52,25,123,126,25,126,127,122,127,127,125,126,112,60,63,22,21,28,114,54,53,28,108,15,27,28,127,126,61,28,57,52,126,27,14,127,127,124,127,123,127,127,49,57,126,52,25,27,111,112,126,126,31,57,114,57,113,106,126,127,121,115,61,115,127,127,126,127,127,126,127,3,127,120,60,54,56,52,57,26,27,113,25,15,112,15,112,120,124,14,15,13,14,57,56,49,63,63,51,30,113,28,127,15,60,127,27,105,27,253,120,15,109,123,28,109,111,15,108,112,109,109,27,57,55,57,59,60,61,27,117,117,118,114,121,103,24,127,127,122,109,63,118,118,127,124,126,126,118,223,107,126,127,124,2,126,127,127,124,125,114,108,109,127,27,127,126,114,127,3,126,120,123,7,124,124,138,126,119,127,3,120,116,117,127,112,127,119,118,114,126,126,126,127,56,124,126,127,23,27,25,126,114,2,124,127,120,118,122,123,108,123,124,120,121,122,172,15,235,28,27,15,126,118,2,3,111,126,125,126,127,111,117,118,3,117,115,127,244,124,124,124,127,123,218,219,225,126,1,3,225,227,111,108,109,105,100,228,127,103,126,127,204,3,199,207,203,61,59,55,55,177,121,108,127,124,126,219,219,126,213,124,126,109,109,110,124,104,103,28,93,31,53,53,3,61,126,237,116,55,324,215,127,126,127,211,57,122,123,177,108,51,120,48,227,249,126,126,124,127,345,316,54,121,114,126,127,298,126,12,298,118,228,289,420,231,116,122,126,127,124,119,115,122,115,126,124,117,112,113,121,110,122,316,89,126,31,229,345,345,119,3,3,2,3,415,415,414,385,405,403,404,112,126,315,227,228,405,405,387,361,338,212,324,345,1,119,3,327,323,228,337,336,340,328,328,328,322,323,321,323,315,127,127,305,3,118,56,124,333,233,234,57,212,327,40,41,232,111,118,124,247,247,48,49,329,233,2,298,298,229,122,295,295,233,345,225,343,233,111,345,351,351,127,127,387,324,175,169,293,176,325,324,308,331,327,299,292,293,335,374,295,253,124,325,336,185,111,127,124,26,126,127,154,127,58,59,14,15,312,322,251,395,253,253,298,245,254,255,254,251,249,254,232,300,225,332,50,51,224,127,252,253,184,333,332,246,244,254,298,108,106,449,292,293,52,53,55,56,292,231,298,3,298,207,227,228,210,487,266,23,235,229,229,126,2,124,254,127,189,238,3,124,224,414,247,420,117,231,205,114,3,323,323,63,69,316,328,327,238,54,55,425,55,420,413,194,292,121,414,104,292,414,414,416,41,173,301,296,298,1,295,496,487,504,308,308,125,405,499,388,298,496,582,487,482,322,484,482,487,487,486,486,466,486,465,573,450,497,498,499,504,500,447,493,511,539,496,487,484,527,493,491,496,489,3,482,482,486,488,479,479,481,504,499,496,482,496,504,498,488,487,486,487,486,487,493,486,486,487,453,498,461,487,474,497,504,449,496,450,453,486,450,450,499,443,497,120,431,464,486,487,486,327,328,489,414,436,412,436,479,405,403,404,405,404,419,419,420,413,414,450,413,414,408,409,410,408,410,60,301,427,498,57,422,359,360,486,487,498,402,504,436,371,487,387,450,394,489,499,408,388,496,496,423,429,485,488,413,486,487,471,486,331,488,225,462,335,497,253,429,404,431,490,490,434,472,248,249,328,15,323,420,479,500,1,458,337,613,504,457,221,488,488,374,231,504,233,231,483,326,228,436,301,488,432,229,315,414,301,336,345,343,305,446,308,323,214,342,343,322,323,420,329,539,327,527,51,374,229,344,345,323,324,308,345,301,405,504,472,325,374,326,345,486,298,345,479,345,3,293,504,472,499,499,470,489,472,489,487,488,486,487,504,489,347,488,420,376,329,465,493,335,504,326,345,1,7,423,437,443,496,316,441,420,482,425,404,472,484,459,459,370,96,330,331,99,6,308,449,308,451,500,463,308,127,15,2,447,474,370,479,462,463,2,463,1,467,480,481,482,483,472,450,450,2,452,454,436,460,3,465,463,121,122,137,414,391,441,440,479,449,450,420,441,471,472,414,479,1,404,450,115,479,504,54,115,116,59,118,487,221,384,385,127,387,122,123,232,391,389,405,391,470,3,1,472,125,470,3,511,607,489,404,405,1,125,488,607,488,609,487,126,122,490,120,2,499,414,408,633,116,423,486,474,602,117,411,412,479,414,59,632,447,144,145,127,126,124,125,127,226,127,127,259,453,453,945,474,804,945,945,499,458,479,238,461,462,466,632,633,633,635,496,96,497,3,505,482,504,504,479,403,487,328,126,47,54,504,471,469,504,504,505,506,3,121,503,504,505,499,504,122,122,6,602,665,479,1,2,3,326,487,414,479,471,404,487,471,472,408,479,479,480,3,449,395,485,466,226,468,470,470,471,470,12,244,462,474,461,486,487,487,465,482,15,484,483,486,487,479,479,504,3,1010,482,499,479,1010,496,496,496,15,462,229,491,462,465,466,462,491,466,497,487,486,483,488,1010,486,479,1010,479,479,2,3,487,465,465,994,3,993,462,463,479,127,468,990,990,466,472,1,465,466,2,483,3,449,467,973,403,441,967,462,449,441,451,420,487,945,441,436,945,436,448,449,450,496,441,402,401,425,401,401,402,2,429,401,408,401,940,434,373,497,430,431,404,6,389,389,408,486,1010,360,484,404,1009,266,389,955,479,393,504,395,496,945,487,497,486,498,401,487,394,924,486,388,387,1014,1014,1014,1014,308,1010,1010,322,1021,304,305,1016,1021,362,504,1010,410,1010,412,496,497,498,499,404,1001,1001,1001,489,437,410,324,412,1014,1010,1010,1014,957,412,413,1021,3,412,413,325,453,3,417,298,1014,335,297,436,414,437,301,3,441,441,335,335,415,402,414,402,414,3,326,305,234,405,266,315,316,388,389,295,228,462,426,265,235,981,295,126,945,295,410,244,412,413,414,276,267,3,729,265,504,240,241,808,1,2,788,757,1002,1010,595,997,728,729,1010,479,1010,482,586,945,1010,986,984,927,485,955,259,1037,994,229,268,259,414,1016,221,222,238,1011,1027,1012,913,1014,248,1018,1010,1010,237,984,1010,986,987,988,1022,1010,3,984,1013,1013,410,1011,1014,1014,1014,1009,1009,2,3,1006,1,1006,3,1010,1006,205,402,412,640,652,1018,985,1,985,1018,14,659,632,942,212,414,940,201,831,924,206,2,206,999,1,590,588,589,183,597,836,599,3,1010,1,1010,1010,1016,3,1016,1,594,596,596,157,596,178,176,1003,607,988,582,1019,1020,3,413,414,469,1,1012,1010,496,497,1010,499,2,607,485,964,964,856,483,484,971,486,487,2,3,964,360,587,659,595,481,504,986,928,971,1010,1011,479,1384,1384,1,1384,1012,1012,515,1012,1001,1001,443,599,1016,1016,1006,1010,993,1003,1003,218,942,592,3,387,211,1346,265,628,487,486,487,487,945,602,947,948,470,409,410,602,1010,1010,487,602,486,1001,945,404,486,487,487,486,487,414,489,490,427,3,3,498,
}

func Explore(w *models.World, index, exploreSize int) {
	for i := 0; i < 3500-exploreSize; i += exploreSize {
		for j := index * Y_SIZE; j < 3500; j += w.ExploresThreads * Y_SIZE {
			bigArea := models.Area{
				PosX:  i,
				PosY:  j,
				SizeX: exploreSize,
				SizeY: Y_SIZE,
			}
			bigAreaResponse := httpclient.SimplePostExplore(bigArea, w)
			if bigAreaResponse.Amount <= 0 {
				continue
			}
			recursiveSearch(i, i+exploreSize, j, bigAreaResponse.Amount, w, exploreSize*Y_SIZE)
			if time.Since(w.StartTime).Seconds() > 500 && index > 4 {
				return
			}
		}
	}
}

func dig(areaResponse models.AreaResponse, w *models.World) {
	w.SingleCellExploreSuccess++

	depth := 1
	left := areaResponse.Amount
	maxDepth := 10
	for {
		if depth > maxDepth || left <= 0 {
			if depth > 10 && left > 0 {
				fmt.Fprintf(os.Stderr, "ERROR NOT FOUND DIG \n")
			}
			break
		}
		w.DigCountsFull[depth-1]++
		start := time.Now()
		licenseData := GetLicense(w)
		treasures := httpclient.PostDig(models.Dig{
			LicenseID: licenseData.License,
			PosX:      areaResponse.Area.PosX,
			PosY:      areaResponse.Area.PosY,
			Depth:     depth,
		}, w, licenseData)
		w.DigTimingsFull[depth-1] += time.Since(start)

		if treasures != nil && len(treasures) > 0 {
			w.DiggedTreasureCount += len(treasures)
			left -= len(treasures)
			for _, treasure := range treasures {
				depthToStartSkip := getDepthToStartSkip(w)
				if depth > depthToStartSkip {
					httpclient.PostCash(treasure, w, depth, licenseData)
				}
			}
		}

		depth++
	}
}

func getDepthToStartSkip(w *models.World) int {
	totalDigCost := 143

	totalCash := make([]int, 10)

	for i := 0; i < 10; i++ {
		for j := i; j < 10; j++ {
			totalCash[i] += w.CashSum[j]
		}
	}

	bestDepth := 0
	bestRatio := float64(0)
	for i := 1; i <= 10; i++{
		totalCost := totalDigCost + (20 * (11 - i)) + (8.5 * 10)
		totalCashByDepth := totalCash[i - 1]
		ratio := float64(totalCashByDepth) / float64(totalCost)

		if ratio > bestRatio {
			bestRatio = ratio
			bestDepth = i
		}
	}

	return bestDepth - 1
}

func getPriorityBasedOnDepth(depth int) int {
	return depth
}

func recursiveSearch(start, end, j, totalInArea int, w *models.World, area int) int {
	percInArea := float64(totalInArea) / float64(area) * 100
	if percInArea < 3.5 && (end-start) > 1 {
		//fmt.Fprintf(os.Stderr, "SKIP BRANCH \n")
		return totalInArea
	}
	totalFound := 0
	if end-start <= 3 {
		for i := start; i < end-1; i++ {
			singleResponse := httpclient.SimplePostExplore(models.Area{
				PosX:  i,
				PosY:  j,
				SizeX: 1,
				SizeY: 1,
			}, w)
			if singleResponse.Amount > 0 {
				dig(singleResponse, w)
				totalFound += singleResponse.Amount
				if totalFound >= totalInArea {
					return totalFound
				}
			}
		}
		dig(models.AreaResponse{
			Area: models.Area{
				PosX:  end - 1,
				PosY:  j,
				SizeX: 1,
				SizeY: 1,
			},
			Amount: totalInArea - totalFound,
		}, w)
		return totalInArea
	}

	copyj := j
	sizey := 1
	width := end - start
	secondHalfStart := start
	secondHalfWidth := width

	if area == EXPLORE_SIZE*8 {
		sizey = 4
		copyj += 4
	}
	if area == EXPLORE_SIZE*4 {
		sizey = 2
		copyj += 2
	}
	if area == EXPLORE_SIZE*2 {
		sizey = 1
		copyj += 1
	}

	if area <= EXPLORE_SIZE {
		if area <= 1792 {
			width = tmp[area]
		} else {
			width = (end - start) / 2
		}

		//if area <= 511 {
		//	width = tmp[area]
		//} else {
		//	power := math.Floor(math.Log2(float64(area)))
		//	power -= 1
		//	width = int(math.Round(math.Pow(2, power)))
		//	width--
		//}

		secondHalfStart = start + width
		secondHalfWidth = end - secondHalfStart
	}

	firstHalfResponse := httpclient.SimplePostExplore(models.Area{
		PosX:  start,
		PosY:  j,
		SizeX: width,
		SizeY: sizey,
	}, w)
	if firstHalfResponse.Amount > 0 {
		totalFound += recursiveSearch(start, start+width, j, firstHalfResponse.Amount, w, width*sizey)
	}
	if totalFound >= totalInArea {
		return totalFound
	}
	return totalFound + recursiveSearch(secondHalfStart, end, copyj, totalInArea-totalFound, w, secondHalfWidth*sizey)
}
